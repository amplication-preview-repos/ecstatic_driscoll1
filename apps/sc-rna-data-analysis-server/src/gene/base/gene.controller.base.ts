/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { GeneService } from "../gene.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { GeneCreateInput } from "./GeneCreateInput";
import { Gene } from "./Gene";
import { GeneFindManyArgs } from "./GeneFindManyArgs";
import { GeneWhereUniqueInput } from "./GeneWhereUniqueInput";
import { GeneUpdateInput } from "./GeneUpdateInput";
import { ExpressionDataFindManyArgs } from "../../expressionData/base/ExpressionDataFindManyArgs";
import { ExpressionData } from "../../expressionData/base/ExpressionData";
import { ExpressionDataWhereUniqueInput } from "../../expressionData/base/ExpressionDataWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class GeneControllerBase {
  constructor(
    protected readonly service: GeneService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Gene })
  @nestAccessControl.UseRoles({
    resource: "Gene",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createGene(@common.Body() data: GeneCreateInput): Promise<Gene> {
    return await this.service.createGene({
      data: data,
      select: {
        createdAt: true,
        id: true,
        name: true,
        symbolField: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Gene] })
  @ApiNestedQuery(GeneFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Gene",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async genes(@common.Req() request: Request): Promise<Gene[]> {
    const args = plainToClass(GeneFindManyArgs, request.query);
    return this.service.genes({
      ...args,
      select: {
        createdAt: true,
        id: true,
        name: true,
        symbolField: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Gene })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Gene",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async gene(
    @common.Param() params: GeneWhereUniqueInput
  ): Promise<Gene | null> {
    const result = await this.service.gene({
      where: params,
      select: {
        createdAt: true,
        id: true,
        name: true,
        symbolField: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Gene })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Gene",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateGene(
    @common.Param() params: GeneWhereUniqueInput,
    @common.Body() data: GeneUpdateInput
  ): Promise<Gene | null> {
    try {
      return await this.service.updateGene({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          name: true,
          symbolField: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Gene })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Gene",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteGene(
    @common.Param() params: GeneWhereUniqueInput
  ): Promise<Gene | null> {
    try {
      return await this.service.deleteGene({
        where: params,
        select: {
          createdAt: true,
          id: true,
          name: true,
          symbolField: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/expressionDataItems")
  @ApiNestedQuery(ExpressionDataFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ExpressionData",
    action: "read",
    possession: "any",
  })
  async findExpressionDataItems(
    @common.Req() request: Request,
    @common.Param() params: GeneWhereUniqueInput
  ): Promise<ExpressionData[]> {
    const query = plainToClass(ExpressionDataFindManyArgs, request.query);
    const results = await this.service.findExpressionDataItems(params.id, {
      ...query,
      select: {
        createdAt: true,
        expressionValue: true,

        gene: {
          select: {
            id: true,
          },
        },

        id: true,

        sample: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/expressionDataItems")
  @nestAccessControl.UseRoles({
    resource: "Gene",
    action: "update",
    possession: "any",
  })
  async connectExpressionDataItems(
    @common.Param() params: GeneWhereUniqueInput,
    @common.Body() body: ExpressionDataWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      expressionDataItems: {
        connect: body,
      },
    };
    await this.service.updateGene({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/expressionDataItems")
  @nestAccessControl.UseRoles({
    resource: "Gene",
    action: "update",
    possession: "any",
  })
  async updateExpressionDataItems(
    @common.Param() params: GeneWhereUniqueInput,
    @common.Body() body: ExpressionDataWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      expressionDataItems: {
        set: body,
      },
    };
    await this.service.updateGene({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/expressionDataItems")
  @nestAccessControl.UseRoles({
    resource: "Gene",
    action: "update",
    possession: "any",
  })
  async disconnectExpressionDataItems(
    @common.Param() params: GeneWhereUniqueInput,
    @common.Body() body: ExpressionDataWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      expressionDataItems: {
        disconnect: body,
      },
    };
    await this.service.updateGene({
      where: params,
      data,
      select: { id: true },
    });
  }
}
