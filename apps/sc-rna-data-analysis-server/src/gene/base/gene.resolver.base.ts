/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Gene } from "./Gene";
import { GeneCountArgs } from "./GeneCountArgs";
import { GeneFindManyArgs } from "./GeneFindManyArgs";
import { GeneFindUniqueArgs } from "./GeneFindUniqueArgs";
import { CreateGeneArgs } from "./CreateGeneArgs";
import { UpdateGeneArgs } from "./UpdateGeneArgs";
import { DeleteGeneArgs } from "./DeleteGeneArgs";
import { ExpressionDataFindManyArgs } from "../../expressionData/base/ExpressionDataFindManyArgs";
import { ExpressionData } from "../../expressionData/base/ExpressionData";
import { GeneService } from "../gene.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Gene)
export class GeneResolverBase {
  constructor(
    protected readonly service: GeneService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Gene",
    action: "read",
    possession: "any",
  })
  async _genesMeta(
    @graphql.Args() args: GeneCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Gene])
  @nestAccessControl.UseRoles({
    resource: "Gene",
    action: "read",
    possession: "any",
  })
  async genes(@graphql.Args() args: GeneFindManyArgs): Promise<Gene[]> {
    return this.service.genes(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Gene, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Gene",
    action: "read",
    possession: "own",
  })
  async gene(@graphql.Args() args: GeneFindUniqueArgs): Promise<Gene | null> {
    const result = await this.service.gene(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Gene)
  @nestAccessControl.UseRoles({
    resource: "Gene",
    action: "create",
    possession: "any",
  })
  async createGene(@graphql.Args() args: CreateGeneArgs): Promise<Gene> {
    return await this.service.createGene({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Gene)
  @nestAccessControl.UseRoles({
    resource: "Gene",
    action: "update",
    possession: "any",
  })
  async updateGene(@graphql.Args() args: UpdateGeneArgs): Promise<Gene | null> {
    try {
      return await this.service.updateGene({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Gene)
  @nestAccessControl.UseRoles({
    resource: "Gene",
    action: "delete",
    possession: "any",
  })
  async deleteGene(@graphql.Args() args: DeleteGeneArgs): Promise<Gene | null> {
    try {
      return await this.service.deleteGene(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [ExpressionData], { name: "expressionDataItems" })
  @nestAccessControl.UseRoles({
    resource: "ExpressionData",
    action: "read",
    possession: "any",
  })
  async findExpressionDataItems(
    @graphql.Parent() parent: Gene,
    @graphql.Args() args: ExpressionDataFindManyArgs
  ): Promise<ExpressionData[]> {
    const results = await this.service.findExpressionDataItems(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
