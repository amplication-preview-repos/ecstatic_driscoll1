/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Gene as PrismaGene,
  ExpressionData as PrismaExpressionData,
} from "@prisma/client";

export class GeneServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.GeneCountArgs, "select">): Promise<number> {
    return this.prisma.gene.count(args);
  }

  async genes(args: Prisma.GeneFindManyArgs): Promise<PrismaGene[]> {
    return this.prisma.gene.findMany(args);
  }
  async gene(args: Prisma.GeneFindUniqueArgs): Promise<PrismaGene | null> {
    return this.prisma.gene.findUnique(args);
  }
  async createGene(args: Prisma.GeneCreateArgs): Promise<PrismaGene> {
    return this.prisma.gene.create(args);
  }
  async updateGene(args: Prisma.GeneUpdateArgs): Promise<PrismaGene> {
    return this.prisma.gene.update(args);
  }
  async deleteGene(args: Prisma.GeneDeleteArgs): Promise<PrismaGene> {
    return this.prisma.gene.delete(args);
  }

  async findExpressionDataItems(
    parentId: string,
    args: Prisma.ExpressionDataFindManyArgs
  ): Promise<PrismaExpressionData[]> {
    return this.prisma.gene
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .expressionDataItems(args);
  }
}
