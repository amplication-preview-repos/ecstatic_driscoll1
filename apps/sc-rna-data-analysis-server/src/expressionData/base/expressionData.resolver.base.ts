/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { ExpressionData } from "./ExpressionData";
import { ExpressionDataCountArgs } from "./ExpressionDataCountArgs";
import { ExpressionDataFindManyArgs } from "./ExpressionDataFindManyArgs";
import { ExpressionDataFindUniqueArgs } from "./ExpressionDataFindUniqueArgs";
import { CreateExpressionDataArgs } from "./CreateExpressionDataArgs";
import { UpdateExpressionDataArgs } from "./UpdateExpressionDataArgs";
import { DeleteExpressionDataArgs } from "./DeleteExpressionDataArgs";
import { Gene } from "../../gene/base/Gene";
import { Sample } from "../../sample/base/Sample";
import { ExpressionDataService } from "../expressionData.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ExpressionData)
export class ExpressionDataResolverBase {
  constructor(
    protected readonly service: ExpressionDataService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ExpressionData",
    action: "read",
    possession: "any",
  })
  async _expressionDataItemsMeta(
    @graphql.Args() args: ExpressionDataCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ExpressionData])
  @nestAccessControl.UseRoles({
    resource: "ExpressionData",
    action: "read",
    possession: "any",
  })
  async expressionDataItems(
    @graphql.Args() args: ExpressionDataFindManyArgs
  ): Promise<ExpressionData[]> {
    return this.service.expressionDataItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ExpressionData, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ExpressionData",
    action: "read",
    possession: "own",
  })
  async expressionData(
    @graphql.Args() args: ExpressionDataFindUniqueArgs
  ): Promise<ExpressionData | null> {
    const result = await this.service.expressionData(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ExpressionData)
  @nestAccessControl.UseRoles({
    resource: "ExpressionData",
    action: "create",
    possession: "any",
  })
  async createExpressionData(
    @graphql.Args() args: CreateExpressionDataArgs
  ): Promise<ExpressionData> {
    return await this.service.createExpressionData({
      ...args,
      data: {
        ...args.data,

        gene: args.data.gene
          ? {
              connect: args.data.gene,
            }
          : undefined,

        sample: args.data.sample
          ? {
              connect: args.data.sample,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ExpressionData)
  @nestAccessControl.UseRoles({
    resource: "ExpressionData",
    action: "update",
    possession: "any",
  })
  async updateExpressionData(
    @graphql.Args() args: UpdateExpressionDataArgs
  ): Promise<ExpressionData | null> {
    try {
      return await this.service.updateExpressionData({
        ...args,
        data: {
          ...args.data,

          gene: args.data.gene
            ? {
                connect: args.data.gene,
              }
            : undefined,

          sample: args.data.sample
            ? {
                connect: args.data.sample,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ExpressionData)
  @nestAccessControl.UseRoles({
    resource: "ExpressionData",
    action: "delete",
    possession: "any",
  })
  async deleteExpressionData(
    @graphql.Args() args: DeleteExpressionDataArgs
  ): Promise<ExpressionData | null> {
    try {
      return await this.service.deleteExpressionData(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Gene, {
    nullable: true,
    name: "gene",
  })
  @nestAccessControl.UseRoles({
    resource: "Gene",
    action: "read",
    possession: "any",
  })
  async getGene(
    @graphql.Parent() parent: ExpressionData
  ): Promise<Gene | null> {
    const result = await this.service.getGene(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Sample, {
    nullable: true,
    name: "sample",
  })
  @nestAccessControl.UseRoles({
    resource: "Sample",
    action: "read",
    possession: "any",
  })
  async getSample(
    @graphql.Parent() parent: ExpressionData
  ): Promise<Sample | null> {
    const result = await this.service.getSample(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
