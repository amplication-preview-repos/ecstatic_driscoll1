/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  ExpressionData as PrismaExpressionData,
  Gene as PrismaGene,
  Sample as PrismaSample,
} from "@prisma/client";

export class ExpressionDataServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ExpressionDataCountArgs, "select">
  ): Promise<number> {
    return this.prisma.expressionData.count(args);
  }

  async expressionDataItems(
    args: Prisma.ExpressionDataFindManyArgs
  ): Promise<PrismaExpressionData[]> {
    return this.prisma.expressionData.findMany(args);
  }
  async expressionData(
    args: Prisma.ExpressionDataFindUniqueArgs
  ): Promise<PrismaExpressionData | null> {
    return this.prisma.expressionData.findUnique(args);
  }
  async createExpressionData(
    args: Prisma.ExpressionDataCreateArgs
  ): Promise<PrismaExpressionData> {
    return this.prisma.expressionData.create(args);
  }
  async updateExpressionData(
    args: Prisma.ExpressionDataUpdateArgs
  ): Promise<PrismaExpressionData> {
    return this.prisma.expressionData.update(args);
  }
  async deleteExpressionData(
    args: Prisma.ExpressionDataDeleteArgs
  ): Promise<PrismaExpressionData> {
    return this.prisma.expressionData.delete(args);
  }

  async getGene(parentId: string): Promise<PrismaGene | null> {
    return this.prisma.expressionData
      .findUnique({
        where: { id: parentId },
      })
      .gene();
  }

  async getSample(parentId: string): Promise<PrismaSample | null> {
    return this.prisma.expressionData
      .findUnique({
        where: { id: parentId },
      })
      .sample();
  }
}
